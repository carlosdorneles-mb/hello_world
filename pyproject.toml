[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["hello_world"]

[project]
version = "0.0.0"
name = "hello_world"
description = "Base project for creating new python packages"
readme = "README.rst"
authors = [
    { name = "Carlos Dorneles", email = "carlos.dorneles@mb.com.br" },
]
maintainers = []
keywords = ["hello", "world"]
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Intended Audience :: Developers',
    'Topic :: Software Development :: Build Tools',
    'Operating System :: OS Independent',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3 :: Only',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
]
requires-python = ">=3.11,<3.14"
dependencies = []

[dependency-groups]
test = [
    "coverage",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-env",
    "pytest-freezer",
    "pytest-mock",
    "pytest-sugar",
    "pytest-xdist[psutil]",
    "pytest-rerunfailures",
    "pytest-timeout",
]
dev = [
    "bump-my-version",
    "git-cliff",
    "ipdb",
    "ipython",
    "pre-commit",
]
lint = [
    "pyright",  # temporary, use Ruff's Red Knot when it is released
    "ruff",
]
docs = [
    "myst-parser",
    "sphinx-autodoc-typehints",
    "sphinx>=8.2.3,<8.3.0",
    "furo>=2024,<2025",
    "sphinxemoji>=0.3.1,<0.4",
    "sphinx-copybutton>=0.5.2,<0.6",
    "sphinx-version-warning>=1.1.2,<1.2",
    "sphinx-jsonschema>=1.19.1,<1.20",
    "sphinxcontrib-mermaid",
    "pyparsing>=3.2.1,<3.3",
    "pydot>=3.0.4,<3.1",
    "sphinx-inline-tabs",
    "sphinxext-opengraph",
    "enum-tools[sphinx]",
    "autodoc-pydantic",
    "sphinx-autobuild",
]

[tool.uv]
package = true
default-groups = ["test", "dev", "lint", "docs"]

[[tool.uv.index]]
name = "mercadobitcoin"
url = "https://pypi.dev.mercadolitecoin.com.br/simple/"
publish-url = "https://pypi.dev.mercadolitecoin.com.br/"
explicit = true

[project.urls]
Documentation = "https://carlosdorneles-mb.github.io/hello_world/"
Repository = "https://github.com/carlosdorneles-mb/hello_world"
Changelog = "https://github.com/carlosdorneles-mb/hello_world/blob/main/CHANGELOG.md"

[tool.ruff]
target-version = "py313"
line-length = 120
lint.select = [ # https://beta.ruff.rs/docs/rules/
    "F",     # pyflakes
    "E",
    "W",     # pycodestyle
    "C90",   # mccabe
    "I",     # isort
    "N",     # pep8-naming
    "UP",    # pyupgrade
    "ANN",   # flake8-annotations
    "ASYNC", # flake8-async
    "S",     # bandit
    "FBT",   # flake8-boolean-trap
    "A",     # flake8-builtins
    "COM",   # flake8-commas
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "T10",   # flake8-debugger
    "DJ",    # flake8-django
    "EM",    # flake8-errmsg
    "FA",    # flake8-future-annotations
    "ISC",   # flake8-implicit-str-concat
    "ICN",   # flake8-import-conventions
    "G",     # flake8-logging-format
    "INP",   # flake8-no-pep420
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "PYI",   # flake8-pyi
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "RET",   # flake8-return
    "SLF",   # flake8-self
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "TCH",   # flake8-type-checking
    "ARG",   # flake8-unused-arguments
    "PTH",   # flake8-use-pathlib
    "PL",    # pylint
    "TRY",   # tryceratops
    "RUF",   # ruff
]
lint.ignore = [
    "D104",
    "D100",
    "COM812",
    "TRY300",  # use else in try/except
    "RUF022",  # sort __all__
]
exclude = []

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true
docstring-code-line-length = 70

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
case-sensitive = true
force-wrap-aliases = true
length-sort-straight = true
lines-between-types = 1

[tool.ruff.lint.pycodestyle]
max-line-length = 120

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pyright]
typeCheckingMode = "basic"
pythonVersion = "3.13"
include = ["hello_world"]
exclude = []
verboseOutput = true
reportInvalidTypeVarUse = false
reportMissingImports = false
reportMissingModuleSource = false
reportShadowedImports = false
reportRedeclaration = false
reportAssignmentType = false
reportAttributeAccessIssue = false
reportArgumentType = false
reportCallIssue = false
reportReturnType = false
reportAbstractUsage = false
venvPath = "."
venv = ".venv"

[tool.pytest.ini_options]
addopts = ""
pythonpath = []
python_files = "test_*.py"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
env = [
    "ENVIRONMENT=test",
]
markers = [
    "slow: Slow tests",
]

[tool.coverage.report]
fail_under = 80
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "@overload",
    "@abstractmethod",
    "Protocol",
]

[tool.bumpversion]
current_version = "0.0.0"
parse = """^
    (?P<major>\\d+)\\.
    (?P<minor>\\d+)\\.
    (?P<patch>\\d+)
    (?:-{0,1}(?P<pre_release>[a-z]+)
    (?P<pre_release_version>\\d+))?
"""
serialize = [
    "{major}.{minor}.{patch}-{pre_release}{pre_release_version}",
    "{major}.{minor}.{patch}",
]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
ignore_missing_files = false
tag = true
sign_tags = false
tag_name = "{new_version}"
tag_message = "bump: version {current_version} → {new_version}"
allow_dirty = false
commit = true
message = "bump: version {current_version} → {new_version}"
commit_args = "--no-verify"
setup_hooks = []
pre_commit_hooks = []
post_commit_hooks = [
    "uv run git-cliff -l -p CHANGELOG.md",
    "uv lock --upgrade-package hello_world --offline",
    "git commit --amend --no-verify --no-edit --only uv.lock --only CHANGELOG.md",
]

[tool.bumpversion.parts.pre_release]
values = ["dev", "rc"]

[[tool.bumpversion.files]]
filename = 'hello_world/__init__.py'

[[tool.bumpversion.files]]
filename = 'README.rst'
search = '-{current_version}-'
replace = '-{new_version}-'

[[tool.bumpversion.files]]
filename = 'pyproject.toml'
search = '''
[project]
version = "{current_version}"
'''
replace = '''
[project]
version = "{new_version}"
'''
